1. 配置node环境；
2. 新建文件夹在 终端输入 npm init 生成package.json 文件；
3.安装webpack    非全局安装npm install --save-dev webpack    全局安装  npm install -g webpack;
4.进行打包  webpack demo.js demo.bundle.js     demo.js要打包的文件      demo.bundle.js打包生成的文件；
//注意这里输入  webpack demo.js demo.bundle.js 如果打包报错有可能是你的webpack版本过高，执行webpack demo.js -o demo.bundle.js  这个为新版webpack的语法  如果有报黄设警告先不要管，是因为没有配置模式，模式分为，生产模式，开发模式，和 无 三总模式，下面教如何配置模式；
4.1 输入webpack demo.js demo.bundle.js  如果没有安装webpack-cli 的话会提示安装webpack-cli  安装之后自动打包；
5.如果感觉每次输入webpack demo.js demo.bundle.js 比较麻烦，可以在项目的根目录和node_modules 同目录，创建webpack.config.js 文件夹，设置

module.exports = {
  entry:  __dirname + "/app/main.js",//已多次提及的唯一入口文件
  output: {
    path: __dirname + "/public",//打包后的文件存放的地方
    filename: "bundle.js"//打包后输出文件的文件名
  }
}
注：“__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录。

下次打包的之后直接输入webpack直接走 webpack.config.js文件进行打包；

打包成功显示
Version:webpack版本

time:这次打包所花费的时间

列表信息

Asset:打包这次生成的文件

Size:这次生成文件的大小

Chunks:这次打包的分块

chunk Names:这次打包的名称

//配置 生产、开发 模式
进入package.json 文件
"scripts": {
 "test": "echo \"Error: no test specified\" && exit 1",

"dev": "webpack --mode deveplopment",
//开发环境输出的
"build": "webpack --mode production"
//生产模式输出的
 },

//然后安装全局webpack-cli  :  npm install --save-dev -g webpack-cli
执行  npm run dev 进行打包   会报错不要急不要慌，打开   https://blog.csdn.net/LPLIFE/article/details/80650993  自己开吧




